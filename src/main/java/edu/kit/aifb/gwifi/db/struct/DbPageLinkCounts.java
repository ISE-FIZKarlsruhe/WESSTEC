// File generated by hadoop record compiler. Do not edit.
package edu.kit.aifb.gwifi.db.struct;

public class DbPageLinkCounts extends org.apache.hadoop.record.Record {
  private static final org.apache.hadoop.record.meta.RecordTypeInfo _rio_recTypeInfo;
  private static org.apache.hadoop.record.meta.RecordTypeInfo _rio_rtiFilter;
  private static int[] _rio_rtiFilterFields;
  static {
    _rio_recTypeInfo = new org.apache.hadoop.record.meta.RecordTypeInfo("DbPageLinkCounts");
    _rio_recTypeInfo.addField("TotalLinksIn", org.apache.hadoop.record.meta.TypeID.IntTypeID);
    _rio_recTypeInfo.addField("DistinctLinksIn", org.apache.hadoop.record.meta.TypeID.IntTypeID);
    _rio_recTypeInfo.addField("TotalLinksOut", org.apache.hadoop.record.meta.TypeID.IntTypeID);
    _rio_recTypeInfo.addField("DistinctLinksOut", org.apache.hadoop.record.meta.TypeID.IntTypeID);
  }
  
  private int TotalLinksIn;
  private int DistinctLinksIn;
  private int TotalLinksOut;
  private int DistinctLinksOut;
  public DbPageLinkCounts() { }
  public DbPageLinkCounts(
    final int TotalLinksIn,
    final int DistinctLinksIn,
    final int TotalLinksOut,
    final int DistinctLinksOut) {
    this.TotalLinksIn = TotalLinksIn;
    this.DistinctLinksIn = DistinctLinksIn;
    this.TotalLinksOut = TotalLinksOut;
    this.DistinctLinksOut = DistinctLinksOut;
  }
  public static org.apache.hadoop.record.meta.RecordTypeInfo getTypeInfo() {
    return _rio_recTypeInfo;
  }
  public static void setTypeFilter(org.apache.hadoop.record.meta.RecordTypeInfo rti) {
    if (null == rti) return;
    _rio_rtiFilter = rti;
    _rio_rtiFilterFields = null;
  }
  private static void setupRtiFields()
  {
    if (null == _rio_rtiFilter) return;
    // we may already have done this
    if (null != _rio_rtiFilterFields) return;
    int _rio_i, _rio_j;
    _rio_rtiFilterFields = new int [_rio_rtiFilter.getFieldTypeInfos().size()];
    for (_rio_i=0; _rio_i<_rio_rtiFilterFields.length; _rio_i++) {
      _rio_rtiFilterFields[_rio_i] = 0;
    }
    java.util.Iterator<org.apache.hadoop.record.meta.FieldTypeInfo> _rio_itFilter = _rio_rtiFilter.getFieldTypeInfos().iterator();
    _rio_i=0;
    while (_rio_itFilter.hasNext()) {
      org.apache.hadoop.record.meta.FieldTypeInfo _rio_tInfoFilter = _rio_itFilter.next();
      java.util.Iterator<org.apache.hadoop.record.meta.FieldTypeInfo> _rio_it = _rio_recTypeInfo.getFieldTypeInfos().iterator();
      _rio_j=1;
      while (_rio_it.hasNext()) {
        org.apache.hadoop.record.meta.FieldTypeInfo _rio_tInfo = _rio_it.next();
        if (_rio_tInfo.equals(_rio_tInfoFilter)) {
          _rio_rtiFilterFields[_rio_i] = _rio_j;
          break;
        }
        _rio_j++;
      }
      _rio_i++;
    }
  }
  public int getTotalLinksIn() {
    return TotalLinksIn;
  }
  public void setTotalLinksIn(final int TotalLinksIn) {
    this.TotalLinksIn=TotalLinksIn;
  }
  public int getDistinctLinksIn() {
    return DistinctLinksIn;
  }
  public void setDistinctLinksIn(final int DistinctLinksIn) {
    this.DistinctLinksIn=DistinctLinksIn;
  }
  public int getTotalLinksOut() {
    return TotalLinksOut;
  }
  public void setTotalLinksOut(final int TotalLinksOut) {
    this.TotalLinksOut=TotalLinksOut;
  }
  public int getDistinctLinksOut() {
    return DistinctLinksOut;
  }
  public void setDistinctLinksOut(final int DistinctLinksOut) {
    this.DistinctLinksOut=DistinctLinksOut;
  }
  public void serialize(final org.apache.hadoop.record.RecordOutput _rio_a, final String _rio_tag)
  throws java.io.IOException {
    _rio_a.startRecord(this,_rio_tag);
    _rio_a.writeInt(TotalLinksIn,"TotalLinksIn");
    _rio_a.writeInt(DistinctLinksIn,"DistinctLinksIn");
    _rio_a.writeInt(TotalLinksOut,"TotalLinksOut");
    _rio_a.writeInt(DistinctLinksOut,"DistinctLinksOut");
    _rio_a.endRecord(this,_rio_tag);
  }
  private void deserializeWithoutFilter(final org.apache.hadoop.record.RecordInput _rio_a, final String _rio_tag)
  throws java.io.IOException {
    _rio_a.startRecord(_rio_tag);
    TotalLinksIn=_rio_a.readInt("TotalLinksIn");
    DistinctLinksIn=_rio_a.readInt("DistinctLinksIn");
    TotalLinksOut=_rio_a.readInt("TotalLinksOut");
    DistinctLinksOut=_rio_a.readInt("DistinctLinksOut");
    _rio_a.endRecord(_rio_tag);
  }
  public void deserialize(final org.apache.hadoop.record.RecordInput _rio_a, final String _rio_tag)
  throws java.io.IOException {
    if (null == _rio_rtiFilter) {
      deserializeWithoutFilter(_rio_a, _rio_tag);
      return;
    }
    // if we're here, we need to read based on version info
    _rio_a.startRecord(_rio_tag);
    setupRtiFields();
    for (int _rio_i=0; _rio_i<_rio_rtiFilter.getFieldTypeInfos().size(); _rio_i++) {
      if (1 == _rio_rtiFilterFields[_rio_i]) {
        TotalLinksIn=_rio_a.readInt("TotalLinksIn");
      }
      else if (2 == _rio_rtiFilterFields[_rio_i]) {
        DistinctLinksIn=_rio_a.readInt("DistinctLinksIn");
      }
      else if (3 == _rio_rtiFilterFields[_rio_i]) {
        TotalLinksOut=_rio_a.readInt("TotalLinksOut");
      }
      else if (4 == _rio_rtiFilterFields[_rio_i]) {
        DistinctLinksOut=_rio_a.readInt("DistinctLinksOut");
      }
      else {
        java.util.ArrayList<org.apache.hadoop.record.meta.FieldTypeInfo> typeInfos = (java.util.ArrayList<org.apache.hadoop.record.meta.FieldTypeInfo>)(_rio_rtiFilter.getFieldTypeInfos());
        org.apache.hadoop.record.meta.Utils.skip(_rio_a, typeInfos.get(_rio_i).getFieldID(), typeInfos.get(_rio_i).getTypeID());
      }
    }
    _rio_a.endRecord(_rio_tag);
  }
  public int compareTo (final Object _rio_peer_) throws ClassCastException {
    if (!(_rio_peer_ instanceof DbPageLinkCounts)) {
      throw new ClassCastException("Comparing different types of records.");
    }
    DbPageLinkCounts _rio_peer = (DbPageLinkCounts) _rio_peer_;
    int _rio_ret = 0;
    _rio_ret = (TotalLinksIn == _rio_peer.TotalLinksIn)? 0 :((TotalLinksIn<_rio_peer.TotalLinksIn)?-1:1);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = (DistinctLinksIn == _rio_peer.DistinctLinksIn)? 0 :((DistinctLinksIn<_rio_peer.DistinctLinksIn)?-1:1);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = (TotalLinksOut == _rio_peer.TotalLinksOut)? 0 :((TotalLinksOut<_rio_peer.TotalLinksOut)?-1:1);
    if (_rio_ret != 0) return _rio_ret;
    _rio_ret = (DistinctLinksOut == _rio_peer.DistinctLinksOut)? 0 :((DistinctLinksOut<_rio_peer.DistinctLinksOut)?-1:1);
    if (_rio_ret != 0) return _rio_ret;
    return _rio_ret;
  }
  public boolean equals(final Object _rio_peer_) {
    if (!(_rio_peer_ instanceof DbPageLinkCounts)) {
      return false;
    }
    if (_rio_peer_ == this) {
      return true;
    }
    DbPageLinkCounts _rio_peer = (DbPageLinkCounts) _rio_peer_;
    boolean _rio_ret = false;
    _rio_ret = (TotalLinksIn==_rio_peer.TotalLinksIn);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = (DistinctLinksIn==_rio_peer.DistinctLinksIn);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = (TotalLinksOut==_rio_peer.TotalLinksOut);
    if (!_rio_ret) return _rio_ret;
    _rio_ret = (DistinctLinksOut==_rio_peer.DistinctLinksOut);
    if (!_rio_ret) return _rio_ret;
    return _rio_ret;
  }
  public Object clone() throws CloneNotSupportedException {
    DbPageLinkCounts _rio_other = new DbPageLinkCounts();
    _rio_other.TotalLinksIn = this.TotalLinksIn;
    _rio_other.DistinctLinksIn = this.DistinctLinksIn;
    _rio_other.TotalLinksOut = this.TotalLinksOut;
    _rio_other.DistinctLinksOut = this.DistinctLinksOut;
    return _rio_other;
  }
  public int hashCode() {
    int _rio_result = 17;
    int _rio_ret;
    _rio_ret = (int)TotalLinksIn;
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = (int)DistinctLinksIn;
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = (int)TotalLinksOut;
    _rio_result = 37*_rio_result + _rio_ret;
    _rio_ret = (int)DistinctLinksOut;
    _rio_result = 37*_rio_result + _rio_ret;
    return _rio_result;
  }
  public static String signature() {
    return "LDbPageLinkCounts(iiii)";
  }
  public static class Comparator extends org.apache.hadoop.record.RecordComparator {
    public Comparator() {
      super(DbPageLinkCounts.class);
    }
    static public int slurpRaw(byte[] b, int s, int l) {
      try {
        int os = s;
        {
          int i = org.apache.hadoop.record.Utils.readVInt(b, s);
          int z = org.apache.hadoop.record.Utils.getVIntSize(i);
          s+=z; l-=z;
        }
        {
          int i = org.apache.hadoop.record.Utils.readVInt(b, s);
          int z = org.apache.hadoop.record.Utils.getVIntSize(i);
          s+=z; l-=z;
        }
        {
          int i = org.apache.hadoop.record.Utils.readVInt(b, s);
          int z = org.apache.hadoop.record.Utils.getVIntSize(i);
          s+=z; l-=z;
        }
        {
          int i = org.apache.hadoop.record.Utils.readVInt(b, s);
          int z = org.apache.hadoop.record.Utils.getVIntSize(i);
          s+=z; l-=z;
        }
        return (os - s);
      } catch(java.io.IOException e) {
        throw new RuntimeException(e);
      }
    }
    static public int compareRaw(byte[] b1, int s1, int l1,
                                   byte[] b2, int s2, int l2) {
      try {
        int os1 = s1;
        {
          int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
          int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
          if (i1 != i2) {
            return ((i1-i2) < 0) ? -1 : 0;
          }
          int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
          int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
          s1+=z1; s2+=z2; l1-=z1; l2-=z2;
        }
        {
          int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
          int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
          if (i1 != i2) {
            return ((i1-i2) < 0) ? -1 : 0;
          }
          int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
          int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
          s1+=z1; s2+=z2; l1-=z1; l2-=z2;
        }
        {
          int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
          int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
          if (i1 != i2) {
            return ((i1-i2) < 0) ? -1 : 0;
          }
          int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
          int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
          s1+=z1; s2+=z2; l1-=z1; l2-=z2;
        }
        {
          int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
          int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
          if (i1 != i2) {
            return ((i1-i2) < 0) ? -1 : 0;
          }
          int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
          int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
          s1+=z1; s2+=z2; l1-=z1; l2-=z2;
        }
        return (os1 - s1);
      } catch(java.io.IOException e) {
        throw new RuntimeException(e);
      }
    }
    public int compare(byte[] b1, int s1, int l1,
                         byte[] b2, int s2, int l2) {
      int ret = compareRaw(b1,s1,l1,b2,s2,l2);
      return (ret == -1)? -1 : ((ret==0)? 1 : 0);}
  }
  
  static {
    org.apache.hadoop.record.RecordComparator.define(DbPageLinkCounts.class, new Comparator());
  }
}
